linux notebook
AWS cloud command based
unix is a file system
pwd 路径
cd / change to root 目录
cd return to own home directory
ls list file
ll -ltr(ll) detail list
mkdir make a folder
clear just clear
tab   有首字母auto-compelet
vi text editor in cloudera
vi myfile make a file name myfile
:wq! save and quit
:w! just save
:q! quit without save
cat myfile 显示myfile内容
history 显示command history 有row id
!1055 查出来的command 重新执行1055号命令
ls -al 显示包含隐藏文件
rwx read write excution 权限
当系统文件时 root为最高权限permision unix系统文件的owner为root
drwxrwxr-x xyz spark_batch 342342 Apr 4 2016 file1
rwxrwxrwx第一行为owner 第二行为group owner 第三行为other user
mv myfile myfile_rename 改file的name
cd /var change directory to var
sudo cat messages 执行系统文件
sudo head var/log/messages 看头10行
sudo tail messages 看尾10行 sudo is unnecessary for non system file
sudo tail -n -100 var/log/messages 看尾100行
sudo tail -f var/log/messages log realtime debuging or monitoring run 程序时产生log 开启这个 时时刻刻产生的log出现在这个界面上
echo 下啥出啥
echo 'Hello world' >> myfile_rename  write into myfile_rename 'hello world' append
echo 'Hello world' > myfile_rename overwrite
alias showlog='sudo tail -f /var/log/messages' 创建一个shortcut 以后输入showlog就执行‘’内的命令
注意空格 很多东西加了空格就是错的
如果不在 .bashrc 文件中 alias只能在当前session内用
每次新开启一个session .bashrc都会被执行一遍 但是在云上不适用
ls /etc >content.txt  显示etc下单文件目录 并把其存入到content.txt中
cat content.txt | grep something you want 显示content.txt 并在里面找到something you want
rm content.txt  remove content.txt
chmod +x myscript 赋予myscript excution的权限
./myscript 执行这个文件
echo $PATH
locate filename
sudo updatedb
find . -name 'cloudera*' .表示在本文件夹 *-->regular expression
find /home/ -perm 777 找到文件夹中owner groupowner others都是rwx 权限的文件 755 5-->wr
cat my* 显示已my开头的文件内容
cat my* | wc -l  查显示的文件中有多少行数据 useful for validation  from 3rd party datas
'|'  means base on the front result perform the following command
split -l 2 myscript  split file into 2 line per file will generate new files base on how many line you have
diff xaa xab  compare two file difference 
cat * > test2 redirect output to a new file
asdad 2>>/dev/null redirect to nowhere 2 means standard error messages use when you do not care the result,whatever pass or not
cat xdf xaa xab > all.txt 2>&1 do not show error message but append it to all.txt
ps aux  list all running process
ps aux | grep spark   whether a sparl process is running 
ls /etc | sort -f > sort.txt sort from a-z -f means case insensitive
cat hello.txt | grep hello  find all sentenses include 'hello'
cat hello.txt | grep ^hello find start with hello
cat hello.txt | grep hello$ find end with hello
cat hello.txt | grep [he] find all with h or e try[a-z] [0-9]
cat hello.txt | grep -c hello  count with hello
fgrep find what you exactly entered
egrep -i 'hello|world' hello.txt e-extend regular expression -i case insensitive 'hello|world' there is hello or world
egrep -v 'hello|world' hello.txt print everything which do not have 'hello|world' case sensitive
egrep -i 'hello|world' hello.txt | grep -v 'jef' add more condition

[cloudera@quickstart ~]$ vim team #创建team文件 内容如下
[cloudera@quickstart ~]$ cat team #显示team文件内容
jeff fulltime 5000
john parttime 3000
mary fulltime 6000
roni parttime 2000
[cloudera@quickstart ~]$ awk '/jeff/' team #找出有jeff的行
jeff fulltime 5000
[cloudera@quickstart ~]$ awk '/jeff/ {print $2:}' team
awk: /jeff/ {print $2:}
awk:                 ^ syntax error #要分号
[cloudera@quickstart ~]$ awk '/jeff/ {print $2;}' team #jeff行的第二项
fulltime
[cloudera@quickstart ~]$ awk '/jeff/ {print $2 "    " $3;}' team
fulltime    5000 #第二项和第三项
[cloudera@quickstart ~]$ awk '/jeff/ {print $0;}' team
jeff fulltime 5000 #0为整行
[cloudera@quickstart ~]$ awk '{print NF}' team #显示每行有几项 默认空格为delimiter
3
3
3
3
[cloudera@quickstart ~]$ awk '{print NF}' team | uniq #显示特异项
3
[cloudera@quickstart ~]$ awk '$1 ~/jeff/ {if($3>=3000) print "Congrates",$1,"for winning";}' team #如果jeff的工资大于3000打印congrats jeff for winning
Congrates jeff for winning #a regular expression

awk -F '\t' 告诉他啥是delimiter

[cloudera@quickstart ~]$ vim team
[cloudera@quickstart ~]$ awk 'NR!=1 {print $1 "  "$2}' team
jeff  fulltime
john  parttime
mary  fulltime
roni  parttime
[cloudera@quickstart ~]$ awk ' {print $1 "  "$2}' team
name  job
jeff  fulltime
john  parttime
mary  fulltime
roni  parttime
[cloudera@quickstart ~]$  #NR!=1 可以去掉头文件 number of the row
[cloudera@quickstart ~]$ awk  '!/jeff/{ print $0}' team
name job salary
john parttime 3000
mary fulltime 6000
roni parttime 2000
[cloudera@quickstart ~]$  #!表示不等于 '这里面是action（print啥的）'
[cloudera@quickstart ~]$ cat team
name job salary
jeff fulltime 5000
john parttime 3000
mary fulltime 6000
roni parttime 2000
[cloudera@quickstart ~]$ sed 's/parttime/promotion/' team #找到parttime 改成promotion 但是源文件不被改动
name job salary
jeff fulltime 5000
john promotion 3000
mary fulltime 6000
roni promotion 2000
[cloudera@quickstart ~]$ sed 's/parttime/promotion/' team > promotion.txt #可以将该过的内容存到一个新的文件中
[cloudera@quickstart ~]$ cat promotion.txt 
name job salary
jeff fulltime 5000
john promotion 3000
mary fulltime 6000
roni promotion 2000
[cloudera@quickstart ~]$ sed '0,/parttime/s/parttime/promotion/' team #找到第一个出现的parttime换成promotion
name job salary
jeff fulltime 5000
john promotion 3000
mary fulltime 6000
roni parttime 2000
[cloudera@quickstart ~]$ sed 's/<[^>]*>//' team#找到有<>的地方 替换成空格
name job salary
jeff fulltime 5000
john parttime 3000
mary fulltime 6000
roni parttime 2000
[cloudera@quickstart ~]$ cut -f1 -d: myfile.txt  # 显示第一列 delimiter是: from myfile
[cloudera@quickstart ~]$ cut --help #显示cut的syntax
[cloudera@quickstart ~]$ cut -c3-8 myfile.txt  #显示3-8个charactor
[cloudera@quickstart ~]$ sed '/root/s/linuxroot/' myfile.txt #替换root为linuxroot
[cloudera@quickstart ~]$ sed '/root/s/linuxroot/g' myfile.txt #加个g表示global
#进入文件后 :/cloudera 找出文件内的所有cloudera的字
cat myfile.txt | grep [5-9] 找内容中有5-9的行 [A-Z]找有大写A-Z的 [^A-Z]没有大写
[cloudera@quickstart ~]$ curl -s google.com |egrep -ci "interal server error" > /dev/null && mail -s "internal error" @01training@outlook.com
# 有错误 把error message 发到email
[cloudera@quickstart ~]$ date +%Y-%m-%d-%H:%M:%S
2017-04-08-21:23:43
*.* means all file
grep -l cloudera *.* #找出所有含有cloudera字样的文件
vim 后编辑文件 
dd 删除一行 
x 删除一个字母
2dd删除2行 --ndd删掉n行
/查找内容:   查找后用n/N换行 n-->forward
#recording
script result.log #开始记录
exit 退出保存







